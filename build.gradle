plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.2'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.acousea'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.xerial:sqlite-jdbc:3.41.2.2'
	implementation 'org.postgresql:postgresql:42.7.2'
	implementation 'org.hibernate.orm:hibernate-community-dialects'
	implementation 'com.squareup.okhttp3:okhttp:4.12.0'

	// AWS
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

	// Lombok
	implementation 'org.projectlombok:lombok:1.18.28'
implementation 'org.springframework.boot:spring-boot-starter-actuator'
    annotationProcessor 'org.projectlombok:lombok:1.18.28'

	// AOP
	implementation 'org.springframework:spring-aop:'

	// Spring security
	implementation 'org.springframework.boot:spring-boot-starter-security'

	// Serial communication
	implementation 'com.fazecast:jSerialComm:2.9.2'

	// Reactive programming and async support
	implementation 'org.springframework.boot:spring-boot-starter-webflux'

	// REDIS
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
//	implementation 'org.springframework.data:spring-data-redis'
//	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
//	implementation 'org.springframework.session:spring-session-data-redis'

	// Lettuce
	implementation 'io.lettuce:lettuce-core:6.5.1.RELEASE'

	// JUnit 5 tests
	testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
	testImplementation 'org.junit.platform:junit-platform-runner:1.10.2'
	testImplementation 'org.junit.platform:junit-platform-suite-api:1.10.2'
	testImplementation 'org.junit.platform:junit-platform-suite-engine:1.10.2'
}

def currentProfile;



if (project.hasProperty('spring.profiles.active') && project.property('spring.profiles.active') == 'prod') {
	currentProfile = 'production';
	println("Current profile is ${currentProfile}")
//	apply from: rootProject.file('gradle/build_prod.gradle');

} else if (project.hasProperty('spring.profiles.active') && project.property('spring.profiles.active') == 'dev') {
	currentProfile = 'development';
	println("Current profile is ${currentProfile}")
//	apply from: rootProject.file('gradle/build_dev.gradle');
} else {
	currentProfile = 'default';
	println("Current profile is ${currentProfile}")
}

tasks.named('test') {
	useJUnitPlatform()
}

